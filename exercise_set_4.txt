====== Exercise 4 - SQL Basics 3 ======

1 | Select all products with product categories and include also products without the category. Product name and its category name should be presented in the result set.
--------------------------------------------------
SELECT products.ProductName, categories.CategoryName 
FROM products 
LEFT outer JOIN categories ON products.CategoryID = categories.CategoryID 
ORDER BY categories.CategoryName, products.ProductName;
--------------------------------------------------

##################################################
2 | Select products that have never been ordered. Include product name in the result set.
--------------------------------------------------
SELECT products.ProductName 
FROM products 
LEFT JOIN orderdetails ON products.ProductID = orderdetails.ProductID 
WHERE orderdetails.ProductID IS NULL;
--------------------------------------------------

##################################################
3 | Count how many orders each shipper has delivered. Show shipper name and count in the result set. Use column name shipped_orders for the calculated column.
--------------------------------------------------
SELECT shippers.ShipperName, COUNT(orders.OrderID) AS shipped_orders
FROM shippers
JOIN orders ON shippers.ShipperID = orders.ShipperID
GROUP BY shippers.ShipperName;
--------------------------------------------------

##################################################
4 | List categories with 10 or more products. Show category name and product count in the result set. Order the result set by product count in descending order.
--------------------------------------------------
SELECT categories.CategoryName, COUNT(products.ProductID) AS ProductCount
FROM categories
JOIN products ON categories.CategoryID = products.CategoryID
GROUP BY categories.CategoryName
HAVING COUNT(products.ProductID) >= 10
ORDER BY ProductCount DESC;
--------------------------------------------------

##################################################
5 | Calculate how many products each customer have ordered (sum quantities). Use column name total_bought for the calculated column. In addition to this column show customers name in the result set.
--------------------------------------------------
SELECT customers.CustomerName, SUM(orderdetails.Quantity) AS total_bought
FROM customers
JOIN orders ON customers.CustomerID = orders.CustomerID
JOIN orderdetails ON orders.OrderID = orderdetails.OrderID
GROUP BY customers.CustomerName;
--------------------------------------------------

##################################################
6 | List products with price greater or equal than all products with product name starting with letter Q. Include productID, product name and price in the result set. Order the result set by price in descending order.
--------------------------------------------------
SELECT ProductID, ProductName, Price
FROM products
WHERE Price >= ALL (SELECT Price FROM products WHERE ProductName LIKE 'Q%')
ORDER BY Price DESC;
--------------------------------------------------

##################################################
7 | Use UNION to gather the following customers:
	- Customers coming from Argentina or Brazil
	- Customers who have made at least one order in 17th of August 2023
Show customer name in the result set and order the result set by customer name in ascending order.

--------------------------------------------------
SELECT CustomerName 
FROM customers 
WHERE Country IN ('Argentina', 'Brazil') 
UNION ALL
SELECT CustomerName 
FROM customers 
JOIN orders ON customers.CustomerID = orders.CustomerID 
WHERE orders.OrderDate = '2023-08-17'  
ORDER BY CustomerName ASC;
--------------------------------------------------

##################################################
8 | Calculate the total price (quantity*price) for products in the following orderIDs: 10250, 10260, 10270 and 10280. Use column name total_price for the calculated column. In addition to this column, show product name in the result set.
--------------------------------------------------
SELECT products.ProductName, (orderdetails.Quantity * products.Price) AS total_price 
FROM orderdetails 
JOIN products ON orderdetails.ProductID = products.ProductID 
WHERE orderdetails.OrderID IN (10250, 10260, 10270, 10280);
--------------------------------------------------

##################################################
9 | Use UNION to gather the following suppliers:
	- Suppliers having five or more products
	- Suppliers with postal code length five or less and country is Japan
	- Suppliers offering products in seafood and dairy products categories
Show supplier name, contact name and phone number in the result set. Order the result set by supplier name in ascending order.
--------------------------------------------------
-- 1. Suppliers having five or more products
SELECT suppliers.SupplierName, suppliers.ContactName, suppliers.Phone
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
GROUP BY suppliers.SupplierID, suppliers.SupplierName, suppliers.ContactName, suppliers.Phone
HAVING COUNT(products.ProductID) >= 5
UNION
-- 2. Suppliers with postal code length five or less and country is Japan
SELECT suppliers.SupplierName, suppliers.ContactName, suppliers.Phone
FROM suppliers
WHERE LENGTH(suppliers.PostalCode) <= 5
AND suppliers.Country = 'Japan'
UNION
-- 3. Suppliers offering products in Seafood and Dairy Products categories
SELECT suppliers.SupplierName, suppliers.ContactName, suppliers.Phone
FROM suppliers
JOIN products ON suppliers.SupplierID = products.SupplierID
JOIN categories ON products.CategoryID = categories.CategoryID
WHERE categories.CategoryName IN ('Seafood', 'Dairy Products')
-- Order by SupplierName directly
ORDER BY SupplierName ASC;
--------------------------------------------------

##################################################
10 | List customers who have bought the most popular product (most sold). Include customer name and quantity in the result set and order the result set by quantity in descending order.
--------------------------------------------------
SELECT customers.CustomerName, SUM(orderdetails.Quantity) AS Quantity
FROM orderdetails
JOIN orders ON orderdetails.OrderID = orders.OrderID
JOIN customers ON orders.CustomerID = customers.CustomerID
WHERE orderdetails.ProductID = 
(    
SELECT orderdetails.ProductID          -- Subquery to find the most popular product
FROM orderdetails
GROUP BY orderdetails.ProductID
ORDER BY SUM(orderdetails.Quantity) DESC
LIMIT 1
)
GROUP BY customers.CustomerID
ORDER BY Quantity DESC;
--------------------------------------------------
